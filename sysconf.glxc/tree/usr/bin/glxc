#!/bin/bash
#
# glxc - manage the life of an LXC container through git push/fetch
#
# HISTORY
#   20140818 first version by JF Gigand <jf@geonef.fr>

nef_command_name=glxc
. $(dirname $0)/../share/nef-common/shell-command || exit 2


######################################################################
# DEFAULTS AND FUNCTIONS

# Path of local GIT repository
export GIT_DIR=/local.repository.git


######################################################################
# COMMANDS

# command: help [command]
#
# Print information about command usage.
#
# With no argument, a list of commands is printed.
##
glxc_command_help() {
    local _argv=()
    local _command=
    local _usage=0

    while [ -n "$1" ]; do
        case "$1" in
            --usage) _usage=1; shift ;;
            -h) glxc_command_help help; return ;;
            -*) glxc_eval_common_option "$1"; shift ;;
            *) _command="$1"; break ;;
        esac
    done

    nef_show_help $_command
}

# command: git-remote-command <git-command>
#
# Forward the command and manage import/export if git-receive-pack or git-upload-pack
#
##
glxc_command_git-remote-command() {
    local _argv=()
    local _command=
    local _usage=0

    while [ -n "$1" ]; do
        case "$1" in
            --usage) _usage=1; shift ;;
            -h) glxc_command_help help; return ;;
            -*) glxc_eval_common_option "$1"; shift ;;
            *) _command="$1"; break ;;
        esac
    done

    glxc_run_hooks pre-git
    glxc_run_git_script export
    glxc_run_hooks pre-git-command

    $_command $GIT_DIR

    glxc_run_hooks post-git-command
    glxc_run_git_script import
    glxc_run_hooks post-git
}

# command: git <git-command>
#
# Execute the given GIT command on the local repository
#
# (mainly for debugging/ingo purposes)
##
glxc_command_git() {
    local _argv=()
    local _command=
    local _usage=0
    local _argv=()

    while [ -n "$1" ]; do
        case "$1" in
            --usage) _usage=1; shift ;;
            -h) glxc_command_help help; return ;;
            --) shift; _argv=("${_argv[@]}" "$@"); shift $# ;;
            -*) glxc_eval_common_option "$1"; shift ;;
            *) _argv=("${_argv[@]}" "$1"); shift ;;
        esac
    done

    [ "${#_argv[@]}" -lt 1 ] && nef_fatal_usage_command remote "missing argument(s)"

    cd $GIT_DIR
    git "${_argv[@]}"
}

######################################################################
# INTERNAL FUNCTIONALITY

# usage: glxc_run_git_script { import | export }
glxc_run_git_script() {
    op=$1
    for script in /etc/glxc/sync/*.$op; do
        name=$(basename $script)
        export GLXC_GIT_BRANCH=$(echo $name | sed 's/\..*//')
        $script 2>&1 | nef_log_pipe "<$name>"
    done
}

# usage: glxc_run_hooks <hook-name>
glxc_run_hooks() {
    local _name=$1
    local _dir=/etc/glxc/hook/${_name}.d

    if [ -d $_dir ]; then
        for hook in $(find $_dir -executable -and -not -type d); do
            $hook | nef_log_pipe "${hook}:"
        done
    fi
}


######################################################################
# COMMAND LINE & RUN

glxc_eval_common_option() {
    case "$1" in
        -v | --verbose) nef_opt_show_verbose=yes; shift ;;
        -vv | --debug-verbose) nef_opt_show_verbose=yes; nef_opt_show_debug=yes; shift ;;
        -h | --help) nef_show_usage; exit 0 ;;
        -*) nef_fatal_usage "bad option: $1" ;;
    esac
}

nef_command_merge_env
nef_command_init_options

glxc_command_argv=()

while [ -n "$1" ]; do

    case "$1" in
        -*) glxc_eval_common_option "$1"; shift ;;
        *) glxc_command_argv=("$@"); break ;;
    esac

done

[ -z "${glxc_command_argv[0]}" ] && glxc_command_argv=(help)


# Run command
glxc_command_function_name="glxc_command_${glxc_command_argv[0]}"
unset glxc_command_argv[0]
$glxc_command_function_name "${glxc_command_argv[@]}" \
    || nef_fatal "command ${glxc_command_argv[0]} returned status $?"
nef_log -v "Command returned successfully."
